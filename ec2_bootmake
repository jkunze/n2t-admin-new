#!/usr/bin/env bash

# xxx use EGNAPA_SSL_{CERT,KEY,CHAIN}FILE if you want non-self-signed certs

set -u		# make the use of unset variables throw an error
hgrc=~/.hgrc
envsh=warts/env.sh
fakeuser=samsmith

cmd=${1:-}
if [[ "$cmd" != init && "$cmd" != go ]]
then
	cat << EOT
Usage: $0 [ init | go ]

Use these instructions and script to set up N2T on a new AWS EC2 instance.
Start by assuming the identity of the user (eg, sudo to a role account login)
that you intend to administer the service and change to its home directory.
Set up some foundation files by running (interactively, not backgrounding)

      $0 init

and follow the instructions that follow and those that it prints.

1.  Verify that you have correct values for username and cdl.username
    inside your ~/.hgrc file.

2.  Add your instance's ssh key to bitbucket.org.

    Login to bitbucket, click on your avatar -> "bitbucket settings" -> "add
    ssh key" (or something like that). If needed, you can generate it with

      ssh-keygen -t rsa         # enter no filename, no passphrase
      cat ~/.ssh/id_rsa.pub     # then "copy" contents to clipboard

    Paste it in when bitbucket asks for it. You'll also likely want to
    add this key to other n2t hosts that you'll want to interact with.

3.  Copy into ~/warts/.pswdfile.n2t the same from from another host, eg,

      scp -p n2t-dev.n2t.net:warts/.pswdfile.n2t ~/warts/

4.  Make sure that your system people have (a) put your web server certs
    file into the ~/ssl/ directory, (b) added mongodb.repo to
    /etc/yum.repos.d, and (c) opened up access between mongo replicas on
    ports 27017-27027 and 47017-47027.

5.  Per the cert filename assignments in ~/$envsh, copy the correct files
    from ~/ssl/... into ~/warts/ssl.

6.  The main installation step is next, done by running

      $0 go

7.  Finally have your system people copy ~/n2t_create/apache.n2t to
    /etc/init.d/apache.n2t so that the service comes up and shuts down
    properly during system reboots. You'll also want to have web service
    monitoring set up, eg, Nagios.

EOT
	exit
fi

function ec2_init {

	local hostname class mailto def_hostname def_class def_mailto
	local p		# prompt strings

	def_hostname=$( hostname -f )
	def_class=loc
	def_mailto='samsmith at example dot org'	# use wrong syntax
		# to trigger downstream external warnings if set to default

	# get $hostname and $class vars
	read -t 60 -p "Enter hostname (default $def_hostname): " hostname || {
		echo Error: the hostname must be defined 1>&2
		return 1
	}
	[[ "$hostname" ]] ||
		hostname="$def_hostname"
	p="Enter service class: [loc(default)|dev|stg|prd] "
	read -t 60 -p "$p" class || {
		echo Error: the service class must be defined 1>&2
		return 1
	}
	[[ "$class" ]] ||
		class="$def_class"
	case "$class" in
	loc|dev|stg|prd) ;;
	*)	echo Error: service class must be one of \
				loc, dev, stg, or prd 1>&2
		return 1 ;;
	esac
	p="Enter email address for system notifications: "
	read -t 60 -p "$p" mailto || {
		echo Error: the service mailto must be defined 1>&2
		return 1
	}
	[[ "$mailto" ]] ||
		mailto="$def_mailto"

	local create=
	[[ -e "$envsh" ]] && {
		p="Backup and overwrite existing $envsh file? "
			p+="[y/n] (default no): "
		read -t 60 -p "$p" || {
			echo Error: response required 1>&2
			return 1
		}
		[[ "$REPLY" =~ ^[yY] ]] && {
			create=yes
			echo ok, keeping existing file
		}
	}

	# If we get here, we're committed to actual filesystem mods.
	mkdir -p ssl warts/ssl

	[[ -e $hgrc ]] || {
		echo creating generic $hgrc - edit to change user names
		cat > $hgrc << EOT

[ui]
# EDIT NEXT LINE
username = Sam Smith <samsmith@example.org>
merge=internal:merge
ssh = ssh -C

[auth]
cdl.prefix   = ssh://hg@bitbucket.org/cdl
# EDIT NEXT LINE
cdl.username = $fakeuser

EOT
	}

	[[ "$create" ]] && {			# create $envsh
		[[ -e "$envsh" ]] &&
			cp -p "$envsh" "$envsh.bak"
		cat > $envsh << EOT
#!/bin/sh

# This shell script sets some instance-specific environment variables.
# The build_server_tree script (eggnog source) reads these for host and
# certificate configuration.

export EGNAPA_HOST=$hostname
export EGNAPA_HOST_CLASS=$class              # eg, one of dev, stg, prd, loc

# Define filenames to hold copies (NOT the master files) of your certificates.
# Use EGNAPA_SSL_CERTFILE for the full path of a signed certificate, if any,
#     and similarly for EGNAPA_SSL_KEYFILE and EGNAPA_SSL_CHAINFILE.
export EGNAPA_SSL_CERTFILE=/apps/n2t/warts/ssl/n2t_net.crt
export EGNAPA_SSL_KEYFILE=/apps/n2t/warts/ssl/n2t_net.key
export EGNAPA_SSL_CHAINFILE=/apps/n2t/warts/ssl/n2t_net.int-root

# Define email address to receive system notifications, eg, from crontab.
export EGNAPA_MAILTO='$mailto'

# Define fully qualified hostname (don't trust hostname -f on some networks).
export MG_HOST=\$EGNAPA_HOST

# Define the hostports of the mongod daemons that should start up.
export MG_LOCAL_DAEMONS="\$MG_HOST:27017,\$MG_HOST:27018,\$MG_HOST:27019"

# Define connection string hosts, which may include non-local servers.
# If undefined, this var defaults to MG_LOCAL_DAEMONS.
export MG_CSTRING_HOSTS="\$MG_LOCAL_DAEMONS"

# Define default mongo replica set options for the connection string.
export MG_REPSETOPTS="socketTimeoutMS=30000&readPreference=primaryPreferred"

# Define default mongo replica set name for the connection string.
export MG_REPSETNAME="live"

# Define default starter port (in a series) for replica set testing.
export MG_TEST_PORT="47017"
EOT
		echo Created $envsh -- now you must copy your cert, keyfile, \
			and chainfile to warts/ssl/n2t_net.{crt,key,int-root}
	}
	return 0
}

[[ "$cmd" == init ]] && {
	ec2_init
	exit
}

source ~/warts/env.sh

# If we get get here, $cmd was "go", so full steam ahead.
# yyy ask for more info to get $hgrc correct with init

grep "^cdl.username.*$fakeuser" $hgrc && {
	echo "Error: you first need to edit values in $hgrc"
	exit 1
}

# I I check into whether to use installonlypkgs; from "man yum.conf":
#   "installonlypkgs=<space separated list of packages>
#      Here you can provide a space-separated list of packages which
#      yum can install, but will never update."

sudo yum -y update			# update to latest OS version
sudo yum -y group install "Development Libraries"
sudo yum -y group install "Development Tools"   # gcc
sudo yum -y group install "Web Server"          # mod_ssl, ExtUtils/MakeMaker
sudo yum -y install hg
sudo yum -y install 'perl(DB_File)' 'perl(BerkeleyDB)'
sudo yum -y install 'perl(Data::UUID)' 'perl(Test::More)'
sudo yum -y install 'perl(Time::HiRes)'
sudo yum -y install 'perl(Log::Log4perl)'
sudo yum -y install 'perl(XML::LibXML)'
sudo yum -y install 'perl(XML::LibXSLT)'
sudo yum -y install 'perl(App::cpanminus)'
sudo yum -y install jq

sudo yum -y install mongodb-org
# on mac, need: brew install mongodb --with-openssl
# yyy never actually used telnet for this
sudo yum -y install telnet	# for network testing, eg, mongo replication
rpm -V mongodb-org || {			# because it has gpgcheck disabled
	sudo yum -y remove mongodb-org
	echo error: mongodb-org installation failed to verify -- aborting.
	exit 1
}

# Trying hypothesis that we don't need these next two yum installs
# # XXX should confirm that these next are still needed
# # This next installs python's lxml module so that the mdsadmin script
# # (that creates DataCite datacenters) can run.
# sudo yum -y install libxml2-devel libxslt-devel python-devel
# sudo yum -y install libxml2-python libxslt-python python-pip
# pip install --install-option="--prefix=$sv" lxml
# # To use this module, .bashrc sets PYTHONPATH to something like
# # PYTHONPATH=$sv/lib64/python2.6/dist-packages

#hg clone http://hg.cdlib.org/n2t_create
hg clone ssh://hg@bitbucket.org/cdl/n2t-admin
rm -fr n2t_create		# if it exists the rename below won't work
mv n2t-admin n2t_create		# simple rename
cd n2t_create
make			# sets up .bashrc and svu defs; runs "svu init"
			# sets up of crontab
		# XXX do not background or redirect, since it asks questions!

set +u			# cannot count on .bashrc to be squeaky clean
source ~/.bashrc	# so we can do svu new
svu new
set -u
./make_instance build mongodb_pm httpd n2t > berrs 2>&1

svu rollout	# ok as no users yet, and this puts everything of interest
		# under the 'cur' version, our default logged-in state

### now logout and login again???

svu cur		# now make sure that instance is in effect yyy needed?

mg rs_start		# one-time replica set initialization

##### !!! you might have to logout and back in for $sv to be correct?
#set_crontab go		# takes care of crontab tests

# XXXX oops: crontab is now set up, but n2t isn't even rolled out!

pfx init
pfx hitrnt		# establish prefix stuff, needed for first rollout
			# yyy this will error out: cd:
			# /apps/n2t/sv/cv2/apache2/pfx_work/build: No such file
			# or directory
			# Could not chdir to
			# /apps/n2t/sv/cv2/apache2/pfx_work/build.

n2t rollout		# takes care of dvscid test

# yyy chicken and egg problem (?) with rollout, which depends on prefixes.
#     seems we might need to run "pfx hitrnt" before rollout?, but we can't do
#     that before we've rolled things out the first time (or can we?)

n2t test		# test that things are more or less ok

#echo 'Now grab and install warts/.pswdfile.n2t from another system.'

#### IMPORTANT!
echo 'Have a superuser copy ~/n2t_create/apache.n2t to /etc/init.d/apache.n2t
and set up chkconfig so that the N2T service comes up on machine (re)boot.'
echo 'Also, ask for a Nagios web service monitor to be set up.'

echo To switch between two main utility directories, use '"cd $sn; pd $se"'.
echo

