#!/usr/bin/env bash

[[ -f ~/.bashrc ]] &&
	source ~/.bashrc	# which might not exist yet

set -u			# now make the use of unset variables throw an error
hgrc=~/.hgrc
envsh=warts/env.sh
fakeuser=samsmith

linux2=true		# xxx remove this later

cmd=${1:-}
if [[ "$cmd" != init && "$cmd" != config &&
	"$cmd" != build && "$cmd" != httpd ]]
then
	cat << EOT
Usage: $0 [ init | config | httpd | build ]

XXX need to update this for git after hg->git migration

Use these instructions and script to set up N2T on a new AWS EC2 instance.
Pick the name of the user role account that will administer the service.
Let's call it "n2t". Start by assuming the identity of the user,

   \$ sudo su - n2t

and making sure you're in n2t's home directory.  Roughly, there are two
steps: "init" and "build".

Set up yum installation, shell startup files, and other foundation files,
by running (interactively, not backgrounding)

      $0 init

and follow the instructions that below, as well as those that this script
prints, including:

  1.  Verify that you have correct values for username and cdl.username
      inside your ~/.hgrc file (~/.gitconfig file).

  2.  Add your instance's ssh key to bitbucket.org (github.com).

      Login to https://bitbucket.org/cdl, click on your avatar, then on
      "bitbucket settings" -> "add ssh key" (or something like that).
      If needed, you can generate it with

        ssh-keygen -t rsa         # enter no filename, no passphrase
        cat ~/.ssh/id_rsa.pub     # then "copy" contents to clipboard

      Paste it in when bitbucket asks for it. You'll also likely want to
      add this key to other n2t hosts that you'll want to interact with.

  3.  Copy into ~/warts/.pswdfile.n2t the same from from another host, eg,

        scp -p n2t-dev.n2t.net:warts/.pswdfile.n2t ~/warts/

  4.  Make sure that your system people have put your web server certs
      file into the ~/ssl/ directory.

  5.  Per the cert filename assignments in ~/$envsh, copy the correct
      files from ~/ssl/... into ~/warts/ssl.

Then run

      $0 config

It's a good idea to logout and login again to make sure the startup files
are working. Then do

      $0 build

If over time a system patch updates apache, you'll do this again (as it
actually calls "$0 httpd" to re-import the system apache.

Finally have your system people install ~/n2t_create/n2t.service with
systemd so that the service comes up and shuts down properly during system
reboots.  You'll also want to have web service monitoring set up, eg, Nagios.

EOT
	exit
fi

function ec2_init {

	local hostname class mailto def_hostname def_class def_mailto
	local p		# prompt strings

	def_hostname=$( hostname -f )
	def_class=loc
	def_mailto='samsmith at example dot org'	# use wrong syntax
		# to trigger downstream external warnings if set to default

	# get $hostname and $class vars
	read -t 60 -p "Enter hostname (default $def_hostname): " hostname || {
		echo Error: the hostname must be defined 1>&2
		return 1
	}
	[[ "$hostname" ]] ||
		hostname="$def_hostname"
	p="Enter service class: [loc(default)|dev|stg|prd] "
	read -t 60 -p "$p" class || {
		echo Error: the service class must be defined 1>&2
		return 1
	}
	[[ "$class" ]] ||
		class="$def_class"
	case "$class" in
	loc|dev|stg|prd) ;;
	*)	echo Error: service class must be one of \
				loc, dev, stg, or prd 1>&2
		return 1 ;;
	esac
	p="Enter email address for system notifications: "
	read -t 60 -p "$p" mailto || {
		echo Error: the service mailto must be defined 1>&2
		return 1
	}
	[[ "$mailto" ]] ||
		mailto="$def_mailto"

	local create=
	if [[ -e "$envsh" ]]
	then
		p="Backup and overwrite existing $envsh file? "
			p+="[y/n] (default no): "
		read -t 60 -p "$p" || {
			echo Error: response required 1>&2
			return 1
		}
		[[ "$REPLY" =~ ^[yY] ]] && {
			create=yes
			echo ok, keeping existing file
		}
	else
		create=yes
	fi

	# If we get here, we're committed to actual filesystem mods.
	mkdir -p ssl warts/ssl

	[[ -e $hgrc ]] || {
		echo creating generic $hgrc '<---' edit this change user names
		cat > $hgrc << EOT

[ui]
# EDIT NEXT LINE
username = Sam Smith <samsmith@example.org>
merge=internal:merge
ssh = ssh -C

[auth]
cdl.prefix   = ssh://hg@bitbucket.org/cdl
# EDIT NEXT LINE
cdl.username = $fakeuser

EOT
	}

	[[ "$create" ]] && {			# create $envsh
		[[ -e "$envsh" ]] &&
			cp -p "$envsh" "$envsh.bak"
		cat > $envsh << EOT
#!/bin/sh

# This shell script sets some instance-specific environment variables.
# The build_server_tree script (from the eggnog source code) reads these
# for host and certificate configuration.

export EGNAPA_SERVICE=n2t		# database names start egg_n2t_...
export EGNAPA_HOST=$hostname
export EGNAPA_HOST_CLASS=$class		# eg, one of dev, stg, prd, loc

# Define filenames to hold copies (NOT the master files) of your certificates.
# Use EGNAPA_SSL_CERTFILE for the full path of a signed certificate, if any,
#     and similarly for EGNAPA_SSL_KEYFILE and EGNAPA_SSL_CHAINFILE.
export EGNAPA_SSL_CERTFILE=/apps/n2t/warts/ssl/2022-03-30/n2t_net.crt
export EGNAPA_SSL_KEYFILE=/apps/n2t/warts/ssl/2022-03-30/n2t_net.key
export EGNAPA_SSL_CHAINFILE=/apps/n2t/warts/ssl/2022-03-30/n2t_net.int-root

# Define email address to receive system notifications, eg, from crontab.
export EGNAPA_MAILTO='$mailto'

EOT

		echo Created $envsh -- now you must copy your cert files, eg, \
			from ssl/2022-03-30/* to warts/ssl/
	}
	return 0
}

# All we need to do is the minimum to bring up Apache successfully,
# since we'll overwrite most inherited configuration. However, these
# snapshot copies we make here will be incorporated over and over
# when the n2t/eggnog instance is rebuilt (very frequent operation).

# XXX after system patch, check for new files and re-snapshot!!

function do_apache_httpd24 {

	# ! assumes svu cur
	local sysap=/etc/httpd		# system apache
	local aptop=~/sv/cur/apache2
	rm -fr $aptop
	mkdir $aptop

	cd $aptop			# where we copy stuff to

	mkdir -p bin cgi-bin htdocs logs var/run
	cp /usr/sbin/httpd bin/httpd
	cp -Lpr $sysap/modules .
	cp -pr $sysap/conf.modules.d .	# keep these verbatim,
		# eg, /etc/httpd/conf.modules.d/00-base.conf; later we'll
		# override selectively via build_server_tree, eg, 00-ssl.conf
	cp -pr $sysap/conf .
 	cp $sysap/conf/magic conf/
	cp /etc/mime.types conf/
	cp -pr /etc/httpd/conf.d .	# later build_server_tree removes these
	mv conf.d/ssl.conf{,.noop}	# disable SSL so we come up w.o certs
	cp /etc/httpd/conf/httpd.conf conf/httpd.conf.sys	# one-time save
	perl -pE '/^(Server|Document)Root/ and s/^/#/;
		/^Listen/ and s/.*/Listen 18880/' conf/httpd.conf.sys \
		> conf/httpd.conf
	cat >> conf/httpd.conf << EOT

PidFile $aptop/var/run/httpd.pid
DefaultRuntimeDir $aptop/var/run
EOT
	cat > README << EOT
This README file and the foundation structure of the enclosing directory
were created from scratch by the ec2_bootmake script. This directory supports
a public-facing Eggnog server on this host, as well as test servers.

The part of its structure that survives repeated rebuilding of the public
and test servers mirrors the system-installed Apache HTTPD 2.4 server.
Eggnog doesn't use all the directory structure (eg, conf.d/*), and rebuilds
just those parts it needs.
EOT

# # xxx drop these?
# 	ln -s /usr/sbin/httpd bin/httpd			# yyy needed?
# 	ln -s /etc/mime.types conf/mime.types
# 	ln -s $sysap/modules modules
# 	ln -s $sysap/conf/magic conf/magic
# 	ln -s $sysap/conf.modules.d conf.modules.d	# keep these verbatim,
# 		# eg, /etc/httpd/conf.modules.d/00-base.conf; later we'll
# 		# override selectively via build_server_tree, eg, 00-ssl.conf
# 
# 	cp /etc/httpd/conf.d/* conf.d	# later build_server_tree removes these
# 				# xxx but are they even needed to start?
# 	cp /etc/httpd/conf/httpd.conf conf/httpd.conf.sys	# one-time save
# 	perl -pE '/^(Server|Document)Root/ and s/^/#/;
# 		/^Listen/ and s/.*/Listen 18880/' conf/httpd.conf.sys \
# 		> conf/httpd.conf
# 	cat >> conf/httpd.conf << EOT
# 
# PidFile $aptop/var/run/httpd.pid
# DefaultRuntimeDir $aptop/var/run
# EOT
# 	rm  conf.d/ssl.conf		# disable SSL stuff for now
# 	#cp conf.d/ssl.conf conf.d/ssl.conf.sys
# 	#perl -pE '/^SSLCert/ and s/^/#/;
# 	#	/^Listen/ and s/.*/Listen 18443/' conf.d/ssl.conf.sys \
# 	#		> conf.d/ssl.conf
}

[[ "$cmd" == httpd ]] && {
	do_apache_httpd24
	exit
}

[[ "$cmd" == init ]] && {
	ec2_init
	exit
}

source ~/warts/env.sh

# If we get get here, $cmd was "go", so full steam ahead.
# yyy ask for more info to get $hgrc correct with init

grep "^cdl.username.*$fakeuser" $hgrc && {
	echo "Error: you first need to edit values in $hgrc"
	exit 1
}

[[ "$cmd" == config ]] && {
	# I I check into whether to use installonlypkgs; from "man yum.conf":
	#   "installonlypkgs=<space separated list of packages>
	#      Here you can provide a space-separated list of packages which
	#      yum can install, but will never update."

	sudo yum -y update			# update to latest OS version

	sudo /usr/bin/amazon-linux-extras install epel	# for more packages
			# eg, perl(BerkeleyDB), perl(Log::Log4perl)

	# To browse so-called "package groups", do "yum group list ids".
	# yyy check return status?
	#sudo yum -y group install "Development Libraries"
	sudo yum -y group install "Development Tools"   # gcc
	sudo yum -y group install "Web Server"    	# yyy needed?
	sudo yum -y install mod_ssl
#$ sudo yum -y group install "Development Libraries"
#Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
#153 packages excluded due to repository priority protections
#Warning: group Development Libraries does not exist.
#Maybe run: yum groups mark install (see man yum)
#Error: No packages in any requested group available to install or update
#$ sudo yum -y group install
#"Development Tools"   # gcc
#Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
#153 packages excluded due to repository priority protections
#Maybe run: yum groups mark install (see man yum)
#No packages in any requested group available to install or update
#$ sudo yum -y group install
#"Web Server"    # mod_ssl, ExtUtils/MakeMaker
#Loaded plugins: extras_suggestions, langpacks, priorities, update-motd
#153 packages excluded due to repository priority protections
#Warning: Group web-server does not have any packages to install.
#Maybe run: yum groups mark install (see man yum)
#No packages in any requested group available to install or update

	#sudo yum -y install libdb4	# version 4 (v5 is default)
	sudo yum -y install libdb	# linux2 v5 is default
	sudo yum -y install hg git
	sudo yum -y install 'perl(DB_File)'	# xxx drop this soon
	sudo yum -y install 'perl(BerkeleyDB)'
	sudo yum -y install 'perl(Data::UUID)' 'perl(Test::More)'
	sudo yum -y install 'perl(Time::HiRes)'
	sudo yum -y install 'perl(Try::Tiny)'
	sudo yum -y install 'perl(Safe::Isa)'

	# yyy why not install better version with cpanm?
	sudo yum -y install 'perl(Log::Log4perl)'

# xxx when system comes up, even partially, crontab is off and spewing
#     error messages a little too easily --  how to stop?

	# XML to parse and format XML blobs for inflection support
	sudo yum -y install 'perl(XML::LibXML)' 'perl(XML::LibXSLT)'
	sudo yum -y install 'perl(App::cpanminus)'
	sudo yum -y install jq			# for Internet Archive API
	sudo yum -y install golang		# nice, but not essential
	sudo amazon-linux-extras install -y vim	# nice, but not essential
	sudo amazon-linux-extras install -y postgresql11

	sudo yum-config-manager --add-repo \
		https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.0/x86_64/
	# see https://confluence.ucop.edu/display/CUG/Amazon+Linux+2+User+Guide#AmazonLinux2UserGuide-Packages
	sudo yum -y install mongodb-org
	echo \
"WARNING: on AWS Linux2, this installation of mongodb configures host boot
scripts via systemd to automatically start mongo on port 27017" 1>&2
	# on mac, need: brew install mongodb --with-openssl
	# yyy never actually used telnet for this
	#sudo yum -y install telnet	# network testing, eg, mongo replication
	#rpm -V mongodb-org || {		# because it has gpgcheck disabled
	#	sudo yum -y remove mongodb-org
	#	echo error: mongodb-org installation failed to verify -- aborting.
	#	exit 1
	#}
	# yyy (c) opened up access between mongo replicas on
	# ports 27017-27027 and 47017-47027.

	# Turn off mongod that $systemd is configured to start up by default.
	sudo systemctl disable mongod


	# Try the hypothesis that we don't need these next two yum installs
	# # XXX should confirm that these next are still needed
	# # This next installs python's lxml module so that the mdsadmin script
	# # (that creates DataCite datacenters) can run.
	# sudo yum -y install libxml2-devel libxslt-devel python-devel
	# sudo yum -y install libxml2-python libxslt-python python-pip
	# pip install --install-option="--prefix=$sv" lxml
	# # To use this module, .bashrc sets PYTHONPATH to something like
	# # PYTHONPATH=$sv/lib64/python2.6/dist-packages

	cd		# go to home directory
	hg clone ssh://hg@bitbucket.org/cdl/n2t-admin
	rm -fr n2t_create	# if it exists the rename below won't work
	mv n2t-admin n2t_create		# simple rename
	cd n2t_create
	[[ "$linux2" ]] &&
		hg update linux2
	make			# sets up .bashrc and svu defs; runs "svu init"
				# sets up of crontab
		# XXX do not background or redirect, since it asks questions!
	exit
}

# XXXX stop here, and make the user do source and svu
#set +u			# cannot count on .bashrc to be squeaky clean
#source ~/.bashrc	# so we can do svu new
#svu new
#set -u

[[ "$cmd" == build ]] && {

	# XXX watch out that you haven't done svu new already! else this
	# will build stuff in the next higher svu level
	svu new || {
		echo Bailing
		exit 1
	}
	echo -n "SVU status: " ; svu status
	cd ~/n2t_create	|| {	# go to build directory
		echo Bailing
		exit 1
	}
	[[ "$linux2" ]] &&
		hg update linux2
	make
# XXXX oops: crontab is now set up, but n2t isn't even rolled out!

# xxx note that linux1 had libdb 4.7 and linux2 (in /usr/lib64) has
#     libdb 5.3 -- we MAY need to do db conversion
	svu cur		# make sure we're on current version before n2t rollout
	echo -n "SVU status, pre-do_apache24: " ; svu status

	do_apache_httpd24 	# copy and modify system version just
				# enough to let us start a server


	## this now works with Linux2
	#mg rs_start || {	# one-time replica set initialization
	#	echo Bailing
	#	exit 1
	#}


	# XXXX resume script here
	#./make_instance build mongodb_pm httpd n2t > berrs 2>&1
	# NB: ./make_instance requires "svu new", where installs go
	#./make_instance build mongodb_pm n2t > berrs 2>&1 || {

	cd ~/n2t_create || {    # go back to build directory
		echo Bailing
		exit 1
	}
	linux2=$linux2 ./make_instance build mongodb_pm n2t > berrs 2>&1 || {
		echo make_instance error -- bailing
		svu cur
		exit 1
	}
	echo -n "SVU status, pre-svu-rollout: " ; svu status

	# now make installed stuff "current" (what was "new" will be "cur")
	svu rollout	# ok as no users yet; this puts everything of interest
			# under the 'cur' version, our default logged-in state
	echo done svu rollout

	svu cur		# make sure we're on current version before n2t rollout
	echo -n "SVU status, pre-n2t-rollout: " ; svu status

	n2t rollout	# takes care of dvscid test

	# yyy chicken & egg problem(?) with rollout, which depends on prefixes.
	#     seems we might need to run "pfx hitrnt" before rollout?, but we
	#     can't do that before we've rolled things out the first time
	#     (or can we?)

	n2t test		# test that things are more or less ok

	#echo 'Now grab and install warts/.pswdfile.n2t from another system.'

	#### IMPORTANT!
	echo 'Have a superuser copy ~/n2t_create/apache.n2t to /etc/init.d/apache.n2t
	and set up chkconfig so that the N2T service comes up on machine (re)boot.'
	echo 'Also, ask for a Nagios web service monitor to be set up.'

	echo To switch between two main utility directories, use '"cd $sn; pd $se"'.
	echo
	exit
}
