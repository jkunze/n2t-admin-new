#!/usr/bin/env bash

# XXX don't enable crontab until after first system rollout!!

[[ -f ~/.bashrc ]] &&
	source ~/.bashrc	# which might not exist yet

set -u			# now make the use of unset variables throw an error
hgrc=~/.hgrc
envsh=warts/env.sh
fakeuser=samsmith

linux2=true		# xxx remove this later

cmd=${1:-}
shift
if [[ "$cmd" != init && "$cmd" != config && "$cmd" != realclean &&
	"$cmd" != build && "$cmd" != install && "$cmd" != httpd ]]
then
	cat << EOT
Usage: $0 [ init | config | httpd [ new ] | build | install | realclean ]

    XXX need to update this for git after hg->git migration
Use these instructions and script to set up N2T on a new AWS EC2 instance.
Pick the name of the user role account that will administer the service.
Let's call it "n2t". Start by assuming the identity of the user,

   \$ sudo su - n2t

and making sure you're in n2t's home directory. To set up gather information
to allow yum installation, shell startup files, and other foundation files,
answer the questions asked by running

      $0 init

and follow the instructions below, as well as any printed by this script.

  1.  Verify that you have correct values for username and cdl.username
      inside your ~/.hgrc file (~/.gitconfig file).

  2.  Add your instance's ssh key to bitbucket.org (github.com).

      Login to https://bitbucket.org/cdl, click on your avatar, then on
      "bitbucket settings" -> "add ssh key" (or something like that).
      View your key with "cat ~/.ssh/id_rsa.pub" and paste it in when
      bitbucket asks for it and add it to other n2t hosts as needed.

  3.  Copy into ~/warts/.pswdfile.n2t the same from from another host, eg,

        scp -p n2t-dev.n2t.net:warts/.pswdfile.n2t ~/warts/

  4.  Make sure that your system people have put your web server certs
      file into a ~/ssl/YYYY-MM-DD directory, and match the cert filename
      assignments in ~/$envsh to the correct files.

This next step takes several minutes: run (interactively, don't background)

      $0 config

You may need to reboot. Either way, it's a good idea to logout and login
again to make sure the startup files are working. Then do

      $0 build

If over time a system patch updates apache, you'll do this again (as it
actually calls "$0 httpd" to re-import the system apache.

Now logout and login again. Then run

      $0 install

Finally have your system people install ~/n2t_create/n2t.service with
systemd so that the service comes up and shuts down properly during system
reboots.  You'll also want to have web service monitoring set up, eg, Nagios.
Occasionally, run "$0 httpd" to rebuild from newly patched Apache server.

To start over and prepare for an "init" on a clean system, do

      $0 realclean

EOT
	exit
fi

function ec2_init {

	local hostname class mailto def_hostname def_class def_mailto
	local p		# prompt strings

	def_hostname=$( hostname -f )
	def_class=loc
	def_mailto='samsmith at example dot org'	# use wrong syntax
		# to trigger downstream external warnings if set to default

	# get $hostname
	read -t 60 -p "Enter hostname (default $def_hostname): " hostname || {
		echo Error: the hostname must be defined 1>&2
		return 1
	}
	local h=$( sed 's/  *//g' <<< "$hostname" )
	if [[ ! "$h" ]]			# if no nonblank
	then
		hostname="$def_hostname"
	else
		hostname="$h"
	fi

	p="Enter service class: [loc(default)|dev|stg|prd] "
	read -t 60 -p "$p" class || {
	       echo Error: the service class must be defined 1>&2
	       return 1
	}
	[[ "$class" ]] ||
	       class="$def_class"
	case "$class" in
	loc|dev|stg|prd) ;;
	*)     echo Error: service class must be one of \
			       loc, dev, stg, or prd 1>&2
	       return 1 ;;
	esac

	p="Enter email address for system notifications: "
	read -t 60 -p "$p" mailto || {
		echo Error: the service mailto must be defined 1>&2
		return 1
	}
	[[ "$mailto" ]] ||
		mailto="$def_mailto"

	local create=
	if [[ -e "$envsh" ]]
	then
		p="Backup and overwrite existing $envsh file? "
			p+="[y/n] (default no): "
		read -t 60 -p "$p" || {
			echo Error: response required 1>&2
			return 1
		}
		[[ "$REPLY" =~ ^[yY] ]] && {
			create=yes
			echo ok, keeping existing file
		}
	else
		create=yes
	fi

	# If we get here, we're committed to actual filesystem mods.
	mkdir -p ssl warts/ssl

        [[ ! -e ~/.ssh/id_rsa.pub ]] && {
		echo OK to answer the next few questions with defaults.
		ssh-keygen -t rsa         # enter no filename, no passphrase
	}
	echo This is your public key for copy/paste into hg repo.
	cat ~/.ssh/id_rsa.pub

	[[ -e $hgrc ]] || {
		echo creating generic $hgrc '<---' edit this change user names
		cat > $hgrc << EOT

[ui]
# EDIT NEXT LINE
username = Sam Smith <samsmith@example.org>
merge=internal:merge
ssh = ssh -C

[auth]
cdl.prefix   = ssh://hg@bitbucket.org/cdl
# EDIT NEXT LINE
cdl.username = $fakeuser

EOT
	}

	[[ "$create" ]] && {			# create $envsh
		[[ -e "$envsh" ]] &&
			cp -p "$envsh" "$envsh.bak"
		cat > $envsh << EOT
#!/bin/sh

# This shell script sets some instance-specific environment variables.
# The build_server_tree script (from the eggnog source code) reads these
# for host and certificate configuration. The EGNAPA_HOST_CLASS here should
# match what is in the eggnog_conf file; this copy is (cached) for speed
# and it helps bootstrapping the first service rollout.

export EGNAPA_HOST=$hostname
export EGNAPA_HOST_CLASS=$class		# eg, one of dev, stg, prd, loc

# Define filenames to hold copies (NOT the master files) of your certificates.
# Use EGNAPA_SSL_CERTFILE for the full path of a signed certificate, if any,
#     and similarly for EGNAPA_SSL_KEYFILE and EGNAPA_SSL_CHAINFILE.

ssldir=/apps/n2t/warts/ssl/2022-04-16
export  EGNAPA_SSL_CERTFILE=\$ssldir/ids-n2t2-prd_n2t_net_cert.cer
export   EGNAPA_SSL_KEYFILE=\$ssldir/ids-n2t2-prd_n2t_net.key
export EGNAPA_SSL_CHAINFILE=\$ssldir/cdl-20200530.int-root
#export EGNAPA_SSL_CHAINFILE=\$ssldir/ids-n2t2-prd_n2t_net_interm.cer

# Define email address to receive system notifications, eg, from crontab.
export EGNAPA_MAILTO='$mailto'

EOT

		cp -pr ~/ssl ~/warts/
		echo Created $envsh -- done.
		#now you must copy your cert files, eg, \
		#	from ssl/2022-03-30/* to warts/ssl/
	}
	return 0
}

# All we need to do is the minimum to bring up Apache successfully,
# since we'll overwrite most inherited configuration. However, these
# snapshot copies we make here will be incorporated over and over
# when the n2t/eggnog instance is rebuilt (very frequent operation).

# XXX after system patch, check for new files and re-snapshot!!

# Give first arg as "new" (default "cur") to install in ~/sv/new

function do_apache_httpd24 {

	local sysap=/etc/httpd		# system apache
	local aptop=~/sv/${1:-cur}/apache2
	echo Running do_apache_httpd24 in $aptop.

	rm -fr $aptop
	mkdir $aptop

	cd $aptop			# where we copy stuff to

	mkdir -p bin cgi-bin htdocs logs var/run
	cp /usr/sbin/httpd bin/httpd
	cp -Lpr $sysap/modules .
	cp -pr $sysap/conf.modules.d .	# keep these verbatim,
		# eg, /etc/httpd/conf.modules.d/00-base.conf; later we'll
		# override selectively via build_server_tree, eg, 00-ssl.conf
	cp -pr $sysap/conf .
 	cp $sysap/conf/magic conf/
	cp /etc/mime.types conf/
	cp -pr /etc/httpd/conf.d .	# later build_server_tree removes these
	mv conf.d/ssl.conf{,.noop}	# disable SSL so we come up w.o. certs
	cp /etc/httpd/conf/httpd.conf conf/httpd.conf.sys	# one-time save
	perl -pE '/^(Server|Document)Root/ and s/^/#/;
		/^Listen/ and s/.*/Listen 18880/' conf/httpd.conf.sys \
		> conf/httpd.conf
	cat >> conf/httpd.conf << EOT

PidFile $aptop/var/run/httpd.pid
DefaultRuntimeDir $aptop/var/run
EOT
	cat > README << EOT
This README file and the foundation structure of the enclosing directory
were created from scratch by the ec2_bootmake script. This directory supports
a public-facing Eggnog server on this host, as well as test servers.

The part of its structure that survives repeated rebuilding of the public
and test servers mirrors the system-installed Apache HTTPD 2.4 server.
Eggnog doesn't use all the directory structure (eg, conf.d/*), and rebuilds
just those parts it needs.
EOT

# # xxx drop these?
# 	ln -s /usr/sbin/httpd bin/httpd			# yyy needed?
# 	ln -s /etc/mime.types conf/mime.types
# 	ln -s $sysap/modules modules
# 	ln -s $sysap/conf/magic conf/magic
# 	ln -s $sysap/conf.modules.d conf.modules.d	# keep these verbatim,
# 		# eg, /etc/httpd/conf.modules.d/00-base.conf; later we'll
# 		# override selectively via build_server_tree, eg, 00-ssl.conf
# 
# 	cp /etc/httpd/conf.d/* conf.d	# later build_server_tree removes these
# 				# xxx but are they even needed to start?
# 	cp /etc/httpd/conf/httpd.conf conf/httpd.conf.sys	# one-time save
# 	perl -pE '/^(Server|Document)Root/ and s/^/#/;
# 		/^Listen/ and s/.*/Listen 18880/' conf/httpd.conf.sys \
# 		> conf/httpd.conf
# 	cat >> conf/httpd.conf << EOT
# 
# PidFile $aptop/var/run/httpd.pid
# DefaultRuntimeDir $aptop/var/run
# EOT
# 	rm  conf.d/ssl.conf		# disable SSL stuff for now
# 	#cp conf.d/ssl.conf conf.d/ssl.conf.sys
# 	#perl -pE '/^SSLCert/ and s/^/#/;
# 	#	/^Listen/ and s/.*/Listen 18443/' conf.d/ssl.conf.sys \
# 	#		> conf.d/ssl.conf
}

[[ "$cmd" == httpd ]] && {
	do_apache_httpd24 "$@"
	exit
}

[[ "$cmd" == init ]] && {
	ec2_init
	exit
}

[[ "$cmd" == realclean ]] && {
	cd ~
	rm -fr \
		README backups/ batches/ binders \
		init.d/ local/ logs/ minters \
		n2t_create/ pfx_harvest/ sv/ warts/README \
		.cpanm/ .eggnog/ .cache/ \
		.bashrc .bash_profile .vimrc .svudef

	sudo yum -y group erase "Development Tools"
	sudo yum -y group erase "Web Server"
	sudo yum -y erase mod_ssl libdb hg git
	sudo yum -y erase 'perl(DB_File)'
	sudo yum -y erase 'perl(BerkeleyDB)'
	sudo yum -y erase 'perl(Data::UUID)' 'perl(Test::More)'
	sudo yum -y erase 'perl(Time::HiRes)'
	sudo yum -y erase 'perl(Try::Tiny)'
	sudo yum -y erase 'perl(Safe::Isa)'
	sudo yum -y erase 'perl(Log::Log4perl)'
	sudo yum -y erase 'perl(XML::LibXML)' 'perl(XML::LibXSLT)'
	sudo yum -y erase 'perl(App::cpanminus)'
	sudo yum -y erase python3		# for transition
	sudo yum -y erase jq			# for Internet Archive API
	sudo yum -y erase golang		# nice, but not essential
	sudo yum -y erase htop
	sudo yum -y erase glances
	#sudo amazon-linux-extras erase -y vim
	#sudo amazon-linux-extras erase -y postgresql11
	# XXX not removing .hgrc or .gitconfig
	echo
	echo Now logout and login again. If lots of system updates occurred, you should reboot first.
	echo
	exit
}

source ~/warts/env.sh

# If we get get here, $cmd was "go", so full steam ahead.
# yyy ask for more info to get $hgrc correct with init

grep "^cdl.username.*$fakeuser" $hgrc && {
	echo "Error: you first need to edit values in $hgrc"
	exit 1
}

[[ "$cmd" == config ]] && {
	# I I check into whether to use installonlypkgs; from "man yum.conf":
	#   "installonlypkgs=<space separated list of packages>
	#      Here you can provide a space-separated list of packages which
	#      yum can install, but will never update."

	sudo yum -y update			# update to latest OS version
	sudo amazon-linux-extras install -y epel	# for more packages
				# eg, perl(BerkeleyDB), perl(Log::Log4perl)

	# To browse so-called "package groups", do "yum group list ids".
	# yyy check return status?
	#sudo yum -y group install "Development Libraries"
	sudo yum -y group install "Development Tools"   # gcc
	sudo yum -y group install "Web Server"    	# yyy needed?

	#sudo yum -y install libdb4	# version 4 (v5 is default)
	#sudo yum -y install libdb4-devel	# /usr/include/libdb4/db.h and
						# /usr/lib64/libdb4/libdb.so
	#sudo yum -y install libdb4-util		# plus db4_* CLI tools

	sudo yum -y install mod_ssl
	sudo yum -y install libdb		# linux2 v5 is default
	sudo yum -y install hg git
	sudo yum -y install 'perl(DB_File)'	# xxx drop this soon
	sudo yum -y install 'perl(BerkeleyDB)'
	sudo yum -y install 'perl(Data::UUID)' 'perl(Test::More)'
	sudo yum -y install 'perl(Time::HiRes)'
	sudo yum -y install 'perl(Try::Tiny)'
	sudo yum -y install 'perl(Safe::Isa)'
	sudo yum -y install 'perl(boolean)'

	# yyy why not install better version with cpanm?
	sudo yum -y install 'perl(Log::Log4perl)'

# xxx when system comes up, even partially, crontab is off and spewing
#     error messages a little too easily --  how to stop?

	# XML to parse and format XML blobs for inflection support
	sudo yum -y install 'perl(XML::LibXML)' 'perl(XML::LibXSLT)'
	sudo yum -y install 'perl(App::cpanminus)'
	sudo yum -y install python3		# for transition
	sudo yum -y install jq			# for Internet Archive API
	sudo yum -y install golang		# nice, but not essential
	sudo yum -y install htop		# monitoring tool
	sudo yum -y install glances		# monitoring tool
	sudo amazon-linux-extras install -y vim	# nice, but not essential
	sudo amazon-linux-extras install -y postgresql11

	#sudo yum-config-manager --add-repo \
	#	https://repo.mongodb.org/yum/amazon/2/mongodb-org/4.0/x86_64/
	## see https://confluence.ucop.edu/display/CUG/Amazon+Linux+2+User+Guide#AmazonLinux2UserGuide-Packages
	#sudo yum -y install mongodb-org
	#echo \
#"WARNING: on AWS Linux2, this installation of mongodb configures host boot
#scripts via systemd to automatically start mongo on port 27017" 1>&2
	# on mac, need: brew install mongodb --with-openssl
	# yyy never actually used telnet for this
	#sudo yum -y install telnet	# network testing, eg, mongo replication
	#rpm -V mongodb-org || {		# because it has gpgcheck disabled
	#	sudo yum -y remove mongodb-org
	#	echo error: mongodb-org installation failed to verify -- aborting.
	#	exit 1
	#}
	# yyy (c) opened up access between mongo replicas on
	# ports 27017-27027 and 47017-47027.

	## Turn off mongod that $systemd is configured to start up by default.
	#sudo systemctl disable mongod

	# Try the hypothesis that we don't need these next two yum installs
	# # XXX should confirm that these next are still needed
	# # This next installs python's lxml module so that the mdsadmin script
	# # (that creates DataCite datacenters) can run.
	# sudo yum -y install libxml2-devel libxslt-devel python-devel
	# sudo yum -y install libxml2-python libxslt-python python-pip
	# pip install --install-option="--prefix=$sv" lxml
	# # To use this module, .bashrc sets PYTHONPATH to something like
	# # PYTHONPATH=$sv/lib64/python2.6/dist-packages

	cd		# go to home directory
	hg clone ssh://hg@bitbucket.org/cdl/n2t-admin
	rm -fr n2t_create	# if it exists the rename below won't work
	mv n2t-admin n2t_create		# simple rename
	cd n2t_create
	linux2=$( hg branches | grep linux2 )
	[[ "$linux2" ]] && {
		hg update linux2
		echo note: repo should be set to Linux2 branch
	}
	make			# sets up .bashrc and svu defs; runs "svu init"
	# sets up of crontab, which we need to disable for now
	crontab /dev/null
	echo "Disabling crontab for now. Re-enable with (cd n2t_create; make)"
		# XXX do not background or redirect, since it asks questions!
	echo
	echo Good idea now to logout and login again.
	echo

	exit
} # end of config

# XXXX stop here, and make the user do source and svu
#set +u			# cannot count on .bashrc to be squeaky clean
#source ~/.bashrc	# so we can do svu new
#svu new
#set -u

[[ "$cmd" == build ]] && {

	# XXXX resume script here
	#./make_instance build mongodb_pm httpd n2t > berrs 2>&1
	# NB: ./make_instance requires "svu new", where installs go
	#./make_instance build mongodb_pm n2t > berrs 2>&1 || {

# XXX make user do svu new?
	# XXX this script and make_instance call "hg" -- remember to convert
	svu new || {
		echo Bailing
		exit 1
	}
	echo -n "SVU status, pre-make_instance: " ; svu status

# XXX script takes over here
	# XXX this script and make_instance call "hg" -- remember to convert
	echo Creating bare-bones apache server.
	do_apache_httpd24 new 	# copy and modify system version just
				# enough to let us start a server

	cd ~/n2t_create || {    # go back to build directory
		echo Bailing
		exit 1
	}

	echo 'Running ./make_instance build ..., output in "make_instance_errs"'
	#./make_instance build mongodb_pm n2t > make_instance_errs 2>&1 || {
# XXX do some prefix harvesting before this!
	./make_instance build n2t > make_instance_errs 2>&1 || {
		echo make_instance error -- bailing
		svu cur
		exit 1
	}
	echo 'Finished ./make_instance build ..."'
	echo -n "SVU status, pre-svu-rollout: " ; svu status

# XXX make user do svu rollout?
	# now make installed stuff "current" (what was "new" will be "cur")
	svu rollout	# ok as no users yet; this puts everything of interest
			# under the 'cur' version, our default logged-in state
	echo done svu rollout
	echo
	echo Important: now logout and login again
	echo
}

[[ "$cmd" == install ]] && {

	#svu cur	# make sure we're on current version before n2t rollout
	#echo -n "SVU status, pre-n2t-rollout: " ; svu status

	echo n2t rollout
	n2t rollout	# takes care of dvcsid test

	# yyy chicken & egg problem(?) with rollout, which depends on prefixes.
	#     seems we might need to run "pfx hitrnt" before rollout?, but we
	#     can't do that before we've rolled things out the first time
	#     (or can we?)
# XXX harvest files have come in before the 'make all' implied above
# XXX and the below won't work until rollout,? because... why?
#     since $sa/prefixes isn't in place?
	#pfx hitrnt	# 2nd time might work? XXX
	#n2t rollout

	echo n2t test
	n2t test		# test that things are more or less ok

	#echo 'Now grab and install warts/.pswdfile.n2t from another system.'

	#### IMPORTANT!
	cat << EOT
Ask your superuser:
Please copy ~/n2t_create/apache.n2t to /etc/init.d/apache.n2t and set up chkconfig so that the N2T service comes up on machine (re)boot.

When ready, adjust eggnog_conf values to turn on crontab for things like
prefix harvesting, error checks, backups, etc.

When all is stable, arrange for Nagios web service monitoring.

To switch between two main utility directories, use "cd $sn; pd $se".

EOT
	exit
}

[[ "$cmd" == oldbuild ]] && {

	# XXXX resume script here
	#./make_instance build mongodb_pm httpd n2t > berrs 2>&1
	# NB: ./make_instance requires "svu new", where installs go
	#./make_instance build mongodb_pm n2t > berrs 2>&1 || {

# XXX make user do svu new?
	# XXX this script and make_instance call "hg" -- remember to convert
	svu new || {
		echo Bailing
		exit 1
	}
	echo -n "SVU status, pre-make_instance: " ; svu status

# XXX script takes over here
	# XXX this script and make_instance call "hg" -- remember to convert
	echo Creating bare-bones apache server.
	do_apache_httpd24 new 	# copy and modify system version just
				# enough to let us start a server

	cd ~/n2t_create || {    # go back to build directory
		echo Bailing
		exit 1
	}
	echo 'Running ./make_instance build ..., output in "make_instance_errs"'
	#./make_instance build mongodb_pm n2t > make_instance_errs 2>&1 || {
# XXX do some prefix harvesting before this!
	./make_instance build n2t > make_instance_errs 2>&1 || {
		echo make_instance error -- bailing
		svu cur
		exit 1
	}
	echo 'Finished ./make_instance build ..."'
	echo -n "SVU status, pre-svu-rollout: " ; svu status

# XXX make user do svu rollout?
	# now make installed stuff "current" (what was "new" will be "cur")
	# ok as no users yet; this puts everything of interest
	# under the 'cur' version, our default logged-in state
	svu rollout || {
		echo Bailing: svu rollout failed
		exit 1
	}
	echo done svu rollout

	svu cur	|| {	# make sure we're on current version before n2t rollout
		echo Bailing: svu cur failed
		exit 1
	}
	echo -n "SVU status, pre-n2t-rollout: " ; svu status

	n2t rollout || {		# takes care of dvcsid test
		echo Bailing: n2t rollout failed
		exit 1
	}

	# yyy chicken & egg problem(?) with rollout, which depends on prefixes.
	#     seems we might need to run "pfx hitrnt" before rollout?, but we
	#     can't do that before we've rolled things out the first time
	#     (or can we?)
# XXX harvest files have come in before the 'make all' implied above
# XXX and the below won't work until rollout,? because... why?
#     since $sa/prefixes isn't in place?
	#pfx hitrnt	# 2nd time might work? XXX
	#n2t rollout

	n2t test		# test that things are more or less ok

	#echo 'Now grab and install warts/.pswdfile.n2t from another system.'

	#### IMPORTANT!
	cat << EOT
Ask your superuser:
Please copy ~/n2t_create/apache.n2t to /etc/init.d/apache.n2t and set up chkconfig so that the N2T service comes up on machine (re)boot.

When ready, adjust eggnog_conf values to turn on crontab for things like
prefix harvesting, error checks, backups, etc.

When all is stable, arrange for Nagios web service monitoring.

To switch between two main utility directories, use "cd $sn; pd $se".

EOT
	exit
}
