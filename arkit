#!/usr/bin/env bash

set -u			# treat unset variables as an error when substituting
me=$( basename $0 )

alias py_ia="python2.7 ~/local/bin/ia"		# requires 2.7
repo=archive.org
resolver=n2t.net
publisher='California Digital Library'
collection=luck
iso8601format='+%Y-%m-%dT%H:%M:%S%z'		# date format
cc0url='https://creativecommons.org/publicdomain/zero/1.0/'
ezcreds=					# ezid credentials
force=						# init flag
noexec=						# init flag
test=						# init flag

summary="
    $me init [ Options ] Filename 'Creator|Title|Date' ['Subject[|...]']
        or
    $me addversion Filename"

function usage {
	cat << EOT

SYNOPSIS                          ($0)
    $me - manage versioned ARK-hival object in LUCK collection at $repo

USAGE $summary

DESCRIPTION
       Given a Filename, the "$me" tool manages a versioned archival object
       (data plus metadata) via a local file that it creates called
       "$me.Filename". The tool mints an ARK identifier associated with the
       object, and deposits it in the LUCK (Long-term UC Knowledge) collection
       at $repo.

       The "init" form mints a new ARK and makes the first deposit of an
       object that associates File with the given Dublin Core metadata.

       The "addversion" form finds a file of the form File.vN for the
       highest number N, or uses N=0 if none. It then uploads the contents
       of File to be added to the archival object as a new version N+1,
       and updates the ARK to resolve to the new version. Version updates
       are done such that $resolver/<ARK> resolves to the latest, and
       $resolver/<ARK>.vN resolves to version N (using Suffix Passthrough).

OPTIONS
    -n, --noexec
       The "--noexec" option does a dry run, informing you what actions it
       would take but without actually taking those actions.
    -f, --force
       Use "--force" with "init" to overwrite an existing $me.File.
    -t, --test
       Use "--test" with "init" to mint a test ARK instead of a permanent ARK.

LIMITATIONS
       ARK minting is limited to users with EZID admin credentials.
       Deposit at $repo uses the "luck" collection and credentials of the
       caller (use "py_ia configure" to set up a ~/.config/ia.ini file).

SUMMARY $summary

EOT
}

cmd=${1:-}	; shift

[[ ! "$cmd" || $cmd == help ]] && {
	usage
	exit
}

function ark2iaid {
	local ark=${1:-} ; shift
	sed -e 's,^ark:/*,ark_,' -e 's,/,_,g' <<< $ark
}

function delete_ark {

	local ark=${1:-}
	[[ ! "$ark" ]] && {
		echo Error: no ARK specified 1>&2
		return 1
	}
	echo -n "Removing ARK $ark: "
	ezcl p "$ezcreds" delete $ark || {
		echo Error: failed to delete $ark 1>&2
		return 1
	}
	return 0
}

function delete_iaid {		# delete Internet Archive id

	local iaid=${1:-}
	[[ ! "$iaid" ]] && {
		echo Error: no IAID specified 1>&2
		return 1
	}
	echo -n "Removing IA object $iaid: "
	py_ia delete $iaid --all || {
		echo "Error: failed to delete $iaid files" 1>&2
		return 1
	}
	return 0
}

function arkit_addversion {

	while [[ "${1:-}" =~ ^- ]]
	do
		case $1 in
		--force|-f)	force=1 ;;
		--test|-t)	test=1 ;;
		--noexec|-n)	noexec='+' ;;	# boolean/sigil
		*)
			echo "Error: unknown option $1" 1>&2
			return 1
			;;
		esac
		shift
	done

	File=${1:-}	; shift
	[[ ! "$File" ]] && {
		echo Error: no file specified 1>&2
		return 1
	}
	[[ ! -r $File ]] && {
		echo Error: cannot find file to archive: $File 1>&2
		return 1
	}
	local objfile=$me.$File
	[[ ! -r $objfile ]] && {
		echo "Error: object file \"$objfile\" does not exist;" \
			'use "init" to create' 1>&2
		return 1
	}
	local File_date=$( date -r $File "$iso8601format" )

	local version version_string vfile

	#vfile=$( ls $File.v* 2>&1 )
	#prefixes.v003.yaml
	# NB: so SPT works, .vN must appear at end, not before,
	#     eg, foo.yaml.v003 not foo.v003.yaml
	# yyy what to do if this interferes with content-type inferencing
	#     based on suffix?
	version=( $( ls $File.v* 2>&1 | \
		perl -ne 's/^.*\.v(\d+)$/$1/ and print' \
		| sort -n | tail -1 ) )
	# The vn_vfile array should contain 2 elements:
	#   a version number and it's corresponding filename
	# $vfile contains '' or "N $File.v*" where N is number for highest
	#   existing version file
echo version is "${vn_vfile[0]}"
echo file is "${vn_vfile[1]}"
	[[ ! "$vfile" ]] && {
		version=0
		version_string=''
	}
exit
# Updates available at: https://n2t.net/ark:/13030/c7xk84q2j
# xxx Permalink to updated content: https://n2t.net/ark:/13030/c7xk84q2j
# xxx Permalink to this version: https://n2t.net/ark:/13030/c7xk84q2j.v005
# To request a prefix: https://n2t.net/e/prefix_request

	local File_date=$( date -r $File "$iso8601format" )

	local version_metadata
# extract highest version, increment
# compute cksum on current and new versions
# add version file with version metadata
# write out modified object data
	read -r -d '' version_metadata <<-EOT
	# === begin version $version metadata
		# version metadata, for VERSIONed file
	# NOT to the target below
	py_ia metadata
	--modify="highest_version:$version"

	local cksum=$( cksum /dev/null )

	py_ia upload
		--target="files/$File.v$version"
		--metadata="title:..., Version $version"
		--metadata="updatedate:..."
		--metadata="version:$version"
	--metadata="fixing:..."
	--metadata="rising:..."
		--metadata="cksum:$cksum"
	# === end version $version metadata
	EOT

	#echo === $objfile === ; cat $objfile
	echo version_metadata
	echo "$version_metadata"

echo "=== id status \"$idstatus\"; wont be permanent without \"commit\""


	# py_ia upload ... ` cat $objfile `
}

function arkit_init {

	while [[ "${1:-}" =~ ^- ]]
	do
		case $1 in
		--force|-f)	force=1 ;;
		--test|-t)	test=1 ;;
		--noexec|-n)	noexec='+' ;;	# boolean/sigil
		*)
			echo "Error: unknown option $1" 1>&2
			return 1
			;;
		esac
		shift
	done

	File=${1:-}	; shift
	Meta=${1:-}	; shift
	Subjects=${1:-}	; shift
	[[ ! "$File" ]] && {
		echo Error: no file specified 1>&2
		usage 1>&2
		return 1
	}
	[[ ! -r $File ]] && {
		echo Error: cannot find file to archive: $File 1>&2
		return 1
	}
	local File_date=$( date -r $File "$iso8601format" )

	[[ ! "$Meta" ]] && {
		echo Error: no metadata specified 1>&2
		usage 1>&2
		return 1
	}
	#local ifs_saved="$IFS"
	# yyy should probably untaint $Meta and $Subjects
	# IFS set for duration of extended (cont. lines) command
	IFS='|' \
		read -a erc <<< $Meta; \
		read -a keywords <<< $Subjects \
	; # IFS value restored at end of command
	#IFS="$ifs_saved"
	local who=${erc[0]:-'(:unav)'}
	local what=${erc[1]:-'(:unav)'}
	local when=${erc[2]:-$File_date}
	local objfile=$me.$File
	[[ -r $objfile && ! "$force" ]] && {
		echo "Error: object file \"$objfile\" exists;" \
			"use --force to overwrite" 1>&2
		return 1
	}

	# yyy should probably put these local values in an init file
	local ezcreds='apitest:apitest'		# ezid credentials
	local ezshoulder='ark:/99999/fk4'	# ezid shoulder
	[[ ! "$test" ]] && {
		ezcreds="admin:$(wegnpw ezidadmin)"
		ezshoulder='ark:/13030/c7'
	}
	# reserved status allows us to delete the ARK if later we need to abort
	local idstatus=reserved
	local ark
	if [[ "$noexec" ]]
	then
		echo $noexec ezcl p "$ezcreds" \
			mint $ezshoulder _status $idstatus
		#ark=ark:/99999/fk4p275p26	# dummy to tide us over
		ark=ark:/99999/fk4_noexec	# dummy to tide us over
	else
		ark=$( ezcl p "$ezcreds" mint $ezshoulder _status $idstatus | 
			sed -n 's/^success: *//p' )
	fi
	[[ ! "$ark" ]] && {
		echo Error: failed to create ARK 1>&2
		return 1
	}
	echo $noexec Created new ARK id: $ark
	local iaid=$( ark2iaid $ark )	# derive IA identifier from $ark
	local landing="https://$repo/download/$iaid"
	local redirect="$landing/$File"

	local cmd
	read -r -d '' cmd << EOT
	ezcl p "$ezcreds" update $ark \
		erc.who "$who" erc.what "$what" erc.when "$when" \
		_target "$redirect" bestest "$redirect" \
		landing "$landing" plunging "$redirect" \

EOT
	echo $noexec Initializing ARK metadata at EZID
	if [[ "$noexec" ]]
	then
		echo $noexec $cmd
	else
		eval "$cmd" > /dev/null || {
			echo Error: failed to add metadata to new ARK: $ark 1>&2
			delete_ark $ark
			return
		}
	fi

	echo $noexec Marking up ARK at EZID:
	if [[ "$noexec" ]]
	then
		echo $noexec ezcl p "$ezcreds" view $ark
	else
		ezcl p "$ezcreds" view $ark | sed 's/^/    /'
	fi

	echo $noexec Checking existence at $repo
	local exists_at_ia=
	if [[ "$noexec" ]]
	then
		echo $noexec py_ia list $iaid
	else
		exists_at_ia=$( py_ia list $iaid )
	fi
	[[ "$exists_at_ia" ]] && {	# if it exists, start with clean slate
		echo Removing $repo object files
		delete_iaid $iaid || {
			echo "Error: failed to delete $iaid files" 1>&2
			delete_ark $ark
			return 1
		}
	}
	# xxx (now ready for future access as A or, via SPT, as A.vN)

	local overall_metadata
	read -r -d '' overall_metadata <<-EOT	# - in <<- strips initial tabs
	# === begin overall object metadata
		# comments must be on lines by themselves
		--metadata="creator:$who"
		--metadata="title:$what"
		# creation date of first version
		--metadata="date:$when"
		--metadata="publisher:$publisher"
		--metadata="identifier:https://$resolver/$ark"
		--metadata="identifier-ark:https://$resolver/$ark"
		--metadata="iaid:$iaid"
		--metadata="collection:$collection"
		--metadata="licenseurl:$cc0url"
		--metadata="bestest:https://$resolver/$ark"
		--metadata="landing:$landing"
		--metadata="plunging:$redirect"
		--metadata="highest_version:0"
	EOT

	# this next line seems to be needed to get a final \n (bash bug?)
	overall_metadata+=$'\n'
	local keyword			# add keyword metadata
	for keyword in "${keywords[@]}"
	do
		[[ ! "$keyword" ]] &&	# skipping blank keywords
			continue
		overall_metadata+="--metadata=\"subject:$keyword\""$'\n'
	done
	overall_metadata+="# === end overall object metadata"$'\n'

	local ia_mdata_args=
	IFS=$'\n' read -d '' -a ia_mdata_args \
		<<< "$( perl -ne '/^\s*#/ or print' <<< $overall_metadata )"
	# IFS will have reverted after one-time change
	echo $noexec "Uploading stub object $ark ($iaid):"

	if [[ "$noexec" ]]
	then
		echo $noexec eval "py_ia upload $iaid $File ${ia_mdata_args[@]}"
		#showargs eval "py_ia upload $iaid $File ${ia_mdata_args[@]}"
	else
		# eval plus array-based metadata args -- a delicate quote-based
		# solution painfully arrived at by trial and error
		# yyy maybe these quoting problems should be avoided by
		#     simply aiming for string construction and eval from
		#     the get go
		eval "py_ia upload $iaid $File ${ia_mdata_args[@]}" || {
			echo "Error: failed to upload metadata for $iaid" 1>&2
			delete_ark $ark
			return 1
		}
	fi
	echo $noexec Writing metadata to local object: $objfile
	[[ ! "$noexec" ]] && {
		echo "$overall_metadata" > $objfile ||
			return 1
	}
	echo XXX should automatically run addversion now
	#arkit_addversion
	return
}

version=0
ia_item="ark_13030_c7xk84q2j"
filebase="cdl_ebi_prefixes.yaml"
target="https://archive.org/download/$ia_item/$filebase"
n2t_item="ark:/13030/c7xk84q2j"

case $cmd in

init)
	arkit_init "$@"
	exit
	;;
rewrite-meta)		# rewrite object level metadata found in $me.$File
	# ...
	exit
	;;
addversion)
	arkit_addversion "$@"
	exit
	;;
remove)
	echo cmd is $cmd
	exit
	;;
list)
	echo cmd is $cmd
	exit
	;;
*)
	echo Error: unknown command: $cmd 1>&2
	usage
	exit 1
	;;
esac

exit

# py_ia upload myidjakkbl2 testia.txt --metadata="foo:bar" --metadata="collection:luck" && echo ok

#target="https://archive.org/download/ark_13030_c7xk84q2j/cdl_ebi_prefixes.yaml"
# upload item file options, where
#  $item = object = identifier
#  file = filename to add

# All filenames end up accessible under stable IA "archival URL":
#    https://archive.org/download/<identifier>/<filename>
# SPT on https://archive.org/download/ark:/13030/c7xk84q2j/cdl_ebi_prefixes.yaml
# once: upload $ia_item $filebase
#       $n2t_item.set _t $target
# first time: snag --mknextcopy $filebase
#       upload $ia_item $filebase.v1
#       SPT permits n2t.net/$n2t_item.v1 -> $target.v1
# second time: upload $filebase.v2
# ...

#xxx add this for each snapshot!
#   --metadata="bestest:https://n2t.net/$n2t_item" \


py_ia upload "$item" "filename.v$version" \
   --metadata="collection:luck" \
   --metadata="creator:California Digital Library and European Bioinformatics Institute" \
   --metadata="title:Registry of prefixes (namespaces) supported by identifiers.org and n2t.net" \
   --metadata="date:2017-09-25" \
   --metadata="subject:identifier" \
   --metadata="subject:resolver" \
   --metadata="subject:scheme" \


